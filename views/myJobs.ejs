<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/accets/css/dashboard.css" />
    <style>
      .video-container {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }

      .video-box {
        display: flex;
        margin-right: 10px;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 20px;
        min-width: 270px;
        min-height: 175px;
        flex-direction: column;
        justify-content: space-between;
      }
      .button-container {
        margin-top: 10px;
      }
      .button-container button {
        margin-right: 10px;
      }

      video {
        max-width: 100%;
        max-height: 150px;
        border: 1px solid #ddd;
        border-radius: 5px;
      }

      #timer {
        margin-top: 5px;
      }
    </style>
    <title>My Jobs</title>
  </head>
  <body>
    <div id="left-menu">
      <h1 class="logo-t">Placeholder Logo</h1>
      <ul>
        <li><a href="/profile">Profile</a></li>
        <li><a href="/job-portal">Job Portal</a></li>
        <li><a href="/my-jobs">My Jobs</a></li>
        <li><a href="/auth/logout">Sign Out</a></li>
      </ul>
    </div>
    <div id="content">
      <h1>My Jobs</h1>

      <% candidateRoles.forEach(role => { %>
      <h2><%= role.selectedRole %></h2>
      <% jobPrompts.forEach(prompt => { %>
      <form id="<%= `form_${role._id}_${prompt._id}` %>">
        <div class="video-container">
          <div class="video-box">
            <label><%= prompt.title %></label>
            <button
              type="button"
              onclick="recordOrReRecordVideo('<%= role._id %>', '<%= prompt._id %>')"
            >
              Record/Re-record
            </button>
          </div>
          <div class="video-box">
            <video
              id="<%= `video_${role._id}_${prompt._id}` %>"
              width="300"
              height="120"
              controls
            >
              <% if (videoObject[`${role._id}_${prompt._id}`]) { %>
              <source
                src="uploads/<%= videoObject[`${role._id}_${prompt._id}`] %>"
                type="video/webm"
              />
              Your browser does not support the video tag. <% } else { %>
              <p>No video recorded yet.</p>
              <% } %>
            </video>
            <div class="actions-container">
              <button
                type="button"
                onclick="playVideo('<%= role._id %>', '<%= prompt._id %>')"
              >
                Play
              </button>

              <button
                type="button"
                id="<%= `stopButton_${role._id}_${prompt._id}` %>"
              >
                Stop rec
              </button>
              <button
                type="button"
                onclick="submitVideo('<%= role._id %>', '<%= prompt._id %>')"
              >
                Submit
              </button>
              <p id="<%= `timer_${role._id}_${prompt._id}` %>" class="timer">
                180s
              </p>
            </div>
          </div>
        </div>
      </form>
      <% }); %> <% }); %>

      <script>
        let mediaRecorder;
        let countdownInterval;
        async function recordOrReRecordVideo(roleId, promptId) {
          const formElement = document.getElementById(
            `form_${roleId}_${promptId}`
          );
          const videoElement = document.getElementById(
            `video_${roleId}_${promptId}`
          );
          const countdownElement = document.getElementById(
            `timer_${roleId}_${promptId}`
          );
          const stopButton = document.getElementById(
            `stopButton_${roleId}_${promptId}`
          );

          stopButton.addEventListener("click", () => {
            stopVideo(roleId, promptId);
          });
          try {
            const stream = await navigator.mediaDevices.getUserMedia({
              video: true,
              audio: true,
            });
            mediaRecorder = new MediaRecorder(stream);
            const chunks = [];
            let countdown = 180;

            mediaRecorder.ondataavailable = (event) => {
              if (event.data.size > 0) {
                chunks.push(event.data);
              }
            };

            mediaRecorder.onstop = async () => {
              const blob = new Blob(chunks, { type: "video/webm" });
              const videoUrl = URL.createObjectURL(blob);

              videoElement.src = videoUrl;
              countdownElement.textContent = "";
            };

            mediaRecorder.start();
            videoElement.srcObject = stream;

            countdownInterval = setInterval(() => {
              countdownElement.textContent = `${countdown}s `;
              countdown--;

              if (countdown < 0) {
                clearInterval(countdownInterval);
                mediaRecorder.stop();
              }
            }, 1000);
          } catch (error) {
            console.error("Error recording video:", error);
          }
        }

        async function submitVideo(roleId, promptId) {
          const formElement = document.getElementById(
            `form_${roleId}_${promptId}`
          );
          const videoElement = document.getElementById(
            `video_${roleId}_${promptId}`
          );

          try {
            const formData = new FormData(formElement);
            formData.append("roleId", roleId);
            formData.append("promptId", promptId);

            const blob = await fetch(videoElement.src).then((response) =>
              response.blob()
            );

            formData.append("video", blob, "recordedVideo.webm");

            const response = await fetch("/upload-video", {
              method: "POST",
              body: formData,
            });

            if (response.ok) {
              alert("Video submitted successfully!");
              location.reload();
            } else {
              alert("Error submitting video.");
            }
          } catch (error) {
            console.error("Error submitting video:", error);
          }
        }

        function stopVideo(roleId, promptId) {
          const countdownElement = document.getElementById(
            `timer_${roleId}_${promptId}`
          );

          if (mediaRecorder && mediaRecorder.state !== "inactive") {
            mediaRecorder.stop();
            clearInterval(countdownInterval);
            countdownElement.textContent = "0s";
          }
          mediaRecorder.stream.getTracks().forEach((track) => track.stop());
          chunks.length = 0;
        }

        function playVideo(roleId, promptId) {
          const videoElement = document.getElementById(
            `video_${roleId}_${promptId}`
          );
          if (videoElement) {
            videoElement.play();
          }
        }
      </script>
    </div>
  </body>
</html>
